"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRouter = void 0;
const find_my_way_1 = __importDefault(require("find-my-way"));
const micro_1 = require("micro");
const utils_1 = require("@lightjs/utils");
const path_1 = require("path");
const fs_1 = require("fs");
const findRouteFiles_1 = require("../utils/findRouteFiles");
const importRouteFiles_1 = require("../utils/importRouteFiles");
const injectRouteIntoRouter_1 = require("../utils/injectRouteIntoRouter");
function findRoutesFolder() {
    const cwd = process.cwd();
    const rootDir = (0, path_1.join)(cwd, 'routes');
    const srcDir = (0, path_1.join)(cwd, 'src', 'routes');
    if ((0, fs_1.existsSync)(rootDir))
        return rootDir;
    if ((0, fs_1.existsSync)(srcDir))
        return srcDir;
    return rootDir;
}
function createRouter({ middleware = [] }) {
    // create find-my-way router with default 404 handler
    const defaultRoute = (0, utils_1.convertHandlerFunctionToRequestHandler)((0, utils_1.applyMiddleware)(middleware, () => {
        throw (0, micro_1.createError)(404, 'Not Found');
    }));
    const router = (0, find_my_way_1.default)({
        ignoreTrailingSlash: true,
        defaultRoute,
    });
    const routesDirPath = findRoutesFolder();
    const fillRouter = () => {
        const routeFiles = (0, findRouteFiles_1.findRouteFiles)(routesDirPath);
        const importedRoutes = (0, importRouteFiles_1.importRouteFiles)(routeFiles, routesDirPath);
        (0, injectRouteIntoRouter_1.injectRouteIntoRouter)(router, importedRoutes, { middleware });
        return importedRoutes;
    };
    const importedRoutes = fillRouter();
    return {
        router,
        importedRoutes,
        reload: () => {
            // reset the router
            router.reset();
            // reimport routes
            return fillRouter();
        },
    };
}
exports.createRouter = createRouter;
